linux文件夹
bin     可执行文件（命令）所有用户
boot    引导目录，内核保存于其中  
dev     被抽象为文件的硬件设配
etc     配置文件
usr     保存装的应用软件
root    root用户文件
home    用户私有数据
lib     库文件
sbin    可执行的二进制文件（超级用户才可执行）
media   挂载文件
mnt     挂载文件
opt     装大型软件（非强制）
proc    虚拟文件夹（保存在内存中的实时信息）
sys     底层硬件信息
var     保存经常变化的信息（如log，保存的是日志）
tmp     临时目录（系统会自动删除）

/bin     	二进制可执行命令   
/dev     	设备特殊文件   
/etc 		系统管理和配置文件   
    /etc/rc.d 	启动的配置文件和脚本   
/home 		用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示   
/lib 		标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件   
/sbin 		系统管理命令，这里存放的是系统管理员使用的管理程序   
/tmp 		公用的临时文件存储点   
/root 		系统管理员的主目录（呵呵，特权阶级）   
/mnt 		系统提供这个目录是让用户临时挂载其他的文件系统。   
/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件
			（windows下叫什么.chk）就在这里   
/proc 		虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。   
/sys        作用与 proc 有些类似，但除了与 proc 相同的具有查看和设定内核参数功能之外，还有为 Linux 统一设备模型作为管理之用。相比于 proc 文件系统，使用 sysfs 导出内核数据的方式更为统一，并且组织的方式更好。

/var 		某些大文件的溢出区，比方说各种服务的日志文件   
/usr 		最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：   
	/usr/x11r6 	存放x window的目录   
	/usr/bin 	众多的应用程序     
	/usr/sbin 	超级用户的一些管理程序   
	/usr/doc 	linux文档   
	/usr/include linux下开发和编译应用程序所需要的头文件   
	/usr/lib 	常用的动态链接库和软件包的配置文件   
	/usr/man 	帮助文档   
	/usr/src 	源代码，linux内核的源代码就放在/usr/src/linux里   
	/usr/local/bin 本地增加的命令   
	/usr/local/lib 本地增加的库根文件系统   

通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要   
经常改动，而且包括严格的文件和一个小的不经常改变的文件系统不容易损坏。   
除了可能的一个叫/vmlinuz标准的系统引导映像之外，根目录一般不含任何文件。所有   
其他文件在根文件系统的子目录中。   
1. /bin目录   
/ bin目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。
这些命令都是二进制文件的可执行程序，多是系统中重要的系统文件。   
2. /sbin目录   
/sbin目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员
使用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用
户使用。   
3. /etc目录   
/etc目录存放着各种系统配置文件，其中包括了用户信息文件/etc/passwd，系统初始化
文件/etc/rc等。linux正是*这些文件才得以正常地运行。   
4. /root目录   
/root 目录是超级用户的目录。   
5. /lib目录   
/lib目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享
文件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程
序的副本，故可以使得可执行文件变得更小，节省空间。   
6. /lib/modules 目录   
/lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新
引导系统所需的模块(例如网络和文件系统驱动)。   
7. /dev目录   
/dev目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，
用户可以通过访问/dev/mouse来访问鼠标的输入，就像访问其他文件一样。   
8. /tmp目录   
/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用   
/var/tmp来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。   
9. /boot目录   
/boot目录存放引导加载器(bootstrap loader)使用的文件，如lilo，核心映像也经常放
在这里，而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，
这时使用单独的文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在
ide硬盘的前1024柱面内。   
10. /mnt目录   
/mnt目录是系统管理员临时安装(mount)文件系统的安装点。程序并不自动支持安装到   
/mnt。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用ms dos文件系统的
软驱，而/mnt/exta 可能是使用ext2文件系统的软驱，/mnt/cdrom 光驱等等。   
11. /proc, /usr,/var,/home目录   
其他文件系统的安装点。   



下面详细介绍；   

/etc文件系统   
/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个   
程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。   
1. /etc/rc或/etc/rc.d或/etc/rc?.d   
启动、或改变运行级时运行的脚本或脚本的目录。   
2. /etc/passwd   
用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其   
他信息。   
3. /etc/fdprm   
软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m   
的帮助页。   
4. /etc/fstab   
指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。   
5. /etc/group   
类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。   
6. /etc/inittab   
init 的配置文件。   
7. /etc/issue   
包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内   
容由系统管理员确定。   
8. /etc/magic   
“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。   
9. /etc/motd   
m o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。   
常用于通告信息，如计划关机时间的警告等。   
10. /etc/mtab   
当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一   
个当前安装的文件系统的列表时使用(例如df 命令)。   
11. /etc/shadow   
在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d   
文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困   
难，以此增加系统的安全性。   
12. /etc/login.defs   
l o g i n命令的配置文件。   
13. /etc/printcap   
类似/etc/termcap ，但针对打印机。语法不同。   
14. /etc/profile 、/etc/csh.login、/etc/csh.cshrc   
登录或启动时bourne或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。   
15. /etc/securetty   
确认安全终端，即哪个终端允许超级用户(root)登录。一般只列出虚拟控制台，这样就不   
可能(至少很困难)通过调制解调器(modem)或网络闯入系统并得到超级用户特权。   
16. /etc/shells   
列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一   
台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允   
许该用户登录。   
17. /etc/termcap   
终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义   
序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。   
这样，多数的程序可以在多数终端上运行。   


/dev文件系统   
/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。   
设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/ d e v / m a k e d e v.local 是   
系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准   
makedev 的一部分)。下面简要介绍/ d e v下一些常用文件。   
1. /dev/console   
系统控制台，也就是直接和系统连接的监视器。   
2. /dev/hd   
i d e硬盘驱动程序接口。如： / d e v / h d a指的是第一个硬盘， h a d 1则是指/ d e v / h d a的第一个   
分区。如系统中有其他的硬盘，则依次为/ d e v / h d b、/ d e v / h d c、. . . . . .；如有多个分区则依次为   
h d a 1、h d a 2 . . . . . .   
3. /dev/sd   
s c s i磁盘驱动程序接口。如有系统有s c s i硬盘，就不会访问/ d e v / h a d，而会访问/ d e v / s d a。   
4. /dev/fd   
软驱设备驱动程序。如： / d e v / f d 0指系统的第一个软盘，也就是通常所说的a：盘，   
/ d e v / f d 1指第二个软盘，. . . . . .而/ d e v / f d 1 h 1 4 4 0则表示访问驱动器1中的4 . 5高密盘。   
5. /dev/st   
s c s i磁带驱动器驱动程序。   
6. /dev/tty   
提供虚拟控制台支持。如： / d e v / t t y 1指的是系统的第一个虚拟控制台， / d e v / t t y 2则是系统   
的第二个虚拟控制台。   
7. /dev/pty   
提供远程登陆伪终端支持。在进行te l n e t登录时就要用到/ d e v / p t y设备。   
8. /dev/ttys   
计算机串行接口，对于d o s来说就是“ c o m 1”口。   
9. /dev/cua   
计算机串行接口，与调制解调器一起使用的设备。   
10. /dev/null   
“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来   
时，只要将输出信息输入到/ d e v / n u l l中即可。   


/usr文件系统   
/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的   
所有文件一般来自l i n u x发行版( d i s t r i b u t i o n )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是   
可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置   
文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。   
1. /usr/x11r6   
包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，   
x的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形   
工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。   
2. /usr/x386   
类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。   
3. /usr/bin   
集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。   
4. /usr/sbin   
包括了根文件系统不必要的系统管理命令，例如多数服务程序。   
5. /usr/man、/ u s r / i n f o、/ u s r / d o c   
这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”   
都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文   
件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调   
用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。   
6. /usr/include   
包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、   
子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名   
字。   
7. /usr/lib   
包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库   
(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也   
有许多程序把配置文件存入其中。   
8. /usr/local   
本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大   
的软件包，如t e x、e m a c s等。   


/var文件系统   
/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化   
或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那   
些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。   
下面列出一些重要的目录(一些不太重要的目录省略了)。   
1. /var/catman   
包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ u s r / m a n / m a n中；有些m a n页   
可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，   
格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。   
(/var/catman 经常被清除，就像清除临时目录一样。)   
2. /var/lib   
存放系统正常运行时要改变的文件。   
3. /var/local   
存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，   
即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。   
4. /var/lock   
锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在   
使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文   
件。   
5. /var/log   
各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注   
销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不   
确定地增长，应该定期清除。   
6. /var/run   
保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登   
录的用户的信息。   
7. /var/spool   
放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每   
个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。   
8. /var/tmp   
比/tmp 允许更大的或需要存在较长时间的临时文件。   
注意系统管理员可能不允许/var/tmp 有很旧的文件。   


/proc文件系统   
/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一   
个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提   
供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详   
细的说明)。   
1. /proc/x   
关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自   
己进程号的目录。   
2. /proc/cpuinfo   
存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。   
3. /proc/devices   
当前运行的核心配置的设备驱动的列表。   
4. /proc/dma   
显示当前使用的d m a通道。   
5. /proc/filesystems   
核心配置的文件系统信息。   
6. /proc/interrupts   
显示被占用的中断信息和占用者的信息，以及被占用的数量。   
7. /proc/ioports   
当前使用的i / o端口。   
8. /proc/kcore   
系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅   
仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何   
东西占用任何磁盘空间。)   
9. /proc/kmsg   
核心输出的消息。也会被送到s y s l o g。   
10. /proc/ksyms   
核心符号表。   
11. /proc/loadavg   
系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。   
12. /proc/meminfo   
各种存储器使用信息，包括物理内存和交换分区( s w a p )。   
13. /proc/modules   
存放当前加载了哪些核心模块信息。   
14. /proc/net   
网络协议状态信息。   
15. /proc/self   
存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，
这将会是不同   
的连接。这主要便于程序得到它自己的进程目录。   
16. /proc/stat   
系统的不同状态，例如，系统启动后页面发生错误的次数。   
17. /proc/uptime   
系统启动的时间长度。   
18. /proc/version   

/sys/devices	这是内核对系统中所有设备的分层次表达模型，也是 /sys 文件系统管理设备的最重要的目录结构，下文会对它的内部结构作进一步分析；
/sys/dev	    这个目录下维护一个按字符设备和块设备的主次号码(major:minor)链接到真实的设备(/sys/devices下)的符号链接文件，它是在内核 2.6.26 首次引入；
/sys/bus	    这是内核设备按总线类型分层放置的目录结构， devices 中的所有设备都是连接于某种总线之下，在这里的每一种具体总线之下可以找到每一个具体设备的符号链接，它也是构成 Linux 统一设备模型的一部分；
/sys/class	    这是按照设备功能分类的设备模型，如系统所有输入设备都会出现在 /sys/class/input 之下，而不论它们是以何种总线连接到系统。它也是构成 Linux 统一设备模型的一部分；
/sys/block	    这里是系统中当前所有的块设备所在，按照功能来说放置在 /sys/class 之下会更合适，但只是由于历史遗留因素而一直存在于 /sys/block, 但从 2.6.22 开始就已标记为过时，只有在打开了 CONFIG_SYSFS_DEPRECATED 配置下编译才会有这个目录的存在，并且在 2.6.26 内核中已正式移到 /sys/class/block, 旧的接口 /sys/block 为了向后兼容保留存在，但其中的内容已经变为指向它们在 /sys/devices/ 中真实设备的符号链接文件；
/sys/firmware	这里是系统加载固件机制的对用户空间的接口，关于固件有专用于固件加载的一套API，在附录 LDD3 一书中有关于内核支持固件加载机制的更详细的介绍；
/sys/fs	        这里按照设计是用于描述系统中所有文件系统，包括文件系统本身和按文件系统分类存放的已挂载点，但目前只有 fuse,gfs2 等少数文件系统支持 sysfs 接口，一些传统的虚拟文件系统(VFS)层次控制参数仍然在 sysctl (/proc/sys/fs) 接口中中；
/sys/kernel	    这里是内核所有可调整参数的位置，目前只有 uevent_helper, kexec_loaded, mm, 和新式的 slab 分配器等几项较新的设计在使用它，其它内核可调整参数仍然位于 sysctl (/proc/sys/kernel) 接口中 ;
/sys/module	    这里有系统中所有模块的信息，不论这些模块是以内联(inlined)方式编译到内核映像文件(vmlinuz)中还是编译为外部模块(ko文件)，都可能会出现在/sys/module 中：
                编译为外部模块(ko文件)在加载后会出现对应的 /sys/module/<module_name>/, 并且在这个目录下会出现一些属性文件和属性目录来表示此外部模块的一些信息，如版本号、加载状态、所提供的驱动程序等；
                编译为内联方式的模块则只在当它有非0属性的模块参数时会出现对应的 /sys/module/<module_name>, 这些模块的可用参数会出现在 /sys/modules/<modname>/parameters/<param_name> 中，

                如 /sys/module/printk/parameters/time 这个可读写参数控制着内联模块 printk 在打印内核消息时是否加上时间前缀；

                所有内联模块的参数也可以由 "<module_name>.<param_name>=<value>" 的形式写在内核启动参数上，如启动内核时加上参数 "printk.time=1" 与 向 "/sys/module/printk/parameters/time" 写入1的效果相同；

                没有非0属性参数的内联模块不会出现于此。

/sys/power	    这里是系统中电源选项，这个目录下有几个属性文件可以用于控制整个机器的电源状态，如可以向其中写入控制命令让机器关机、重启等。
/sys/slab       (对应 2.6.23 内核，在 2.6.24 以后移至 /sys/kernel/slab)	从2.6.23 开始可以选择 SLAB 内存分配器的实现，并且新的 SLUB（Unqueued Slab Allocator）被设置为缺省值；如果编译了此选项，在 /sys 下就会出现 /sys/slab ，里面有每一个 kmem_cache 结构体的可调整参数。对应于旧的 SLAB 内存分配器下的 /proc/slabinfo 动态调整接口，新式的 /sys/kernel/slab/<slab_name> 接口中的各项信息和可调整项显得更为清晰。 

================================================================================================================================================================================

 

目录树可以分为小的部分，每个部分可以在自己的磁盘或分区上（/proc比较特殊）。主要部分是/usr、/var、/home、/proc和根文件系统。每个部分有不同的目的。 /usr：包含所有的命令、程序库、文档和其它文件。这些文件在正常操作中不会被改变的。这个目录也包含你的Linux发行版本的主要的应用程序，譬如，Netscape。文件系统包含所有命令、库、man页和其他一般操作中所需的不改变的文件。 /usr不应该有一般使用中要修改的文件。这样允许此文件系统中的文件通过网络共享，这样可以更有效，因为这样节省了磁盘空间(/usr 很容易是数百兆)，且易于管理(当升级应用时，只有主/usr需要改变，而无须改变每台机器)即使此文件系统在本地盘上，也可以只读mount，以减少系统崩溃时文件系统的损坏。 /var：包含在正常操作中被改变的文件：假脱机文件、记录文件、加锁文件、临时文件和页格式化文件等。文件系统包含会改变的文件，比如spool目录(mail、news、打印机等用的)， log文件、formatted manual pages和暂存文件。传统上/var的所有东西曾在 /usr 下的某个地方，但这样/usr就不可能只读安装了。 /home：包含用户的文件：参数设置文件、个性化文件、文档、数据、EMAIL、缓存数据等。这个目录在系统省级时应该保留。文件系统包含用户家目录，即系统上的所有实际数据。一个大的/home 可能要分为若干文件系统，需要在/home 下加一级名字，如/home/student、/home/staff 等。 /proc：整个包含虚幻的文件。它们实际上并不存在磁盘上，也不占用任何空间。（用 ls –l 可以显示它们的大小）当查看这些文件时，实际上是在访问存在内存中的信息，这些信息用于访问系统。该文件系统是一个假的文件系统。它不存在在磁盘某个磁盘上。而是由核心在内存中产生。用于提供关于系统的信息(originally about processes, hence the name)。 根文件系统：根文件系统一般应该比较小，因为它包括严格的文件和一些小的不经常改变的文件系统，不容易损坏。损坏的根文件系统一般意味着系统无法引导，除非用特定的方法(例如从软盘)。根目录一般不含任何文件，除了可能的标准的系统引导映象，通常叫/vmlinuz 。所有其他文件在根文件系统的子目录中。根目录一般有以下子目录： /bin：系统启动时需要的执行文件（二进制），这些文件可以被普通用户使用。 /sbin：系统执行文件（二进制），这些文件不打算被普通用户使用。（普通用户仍然可以使用它们，但要指定目录。） /etc:特定机器的配置文件。 /root：系统管理员（也叫超级用户或根用户）的Home目录。 /lib：根文件系统上的程序所需的共享库。 /boot：引导加载器(bootstrap loader)使用的文件，如LILO。核心映象也经常在这里，而不是在根目录。如果有许多核心映象，这个目录可能变得很大，这时可能使用单独的文件系统更好。另一个理由是要确保核心映象必须在IDE硬盘的前1024柱面内。当计算机启动时（如果有多个操作系统，有可能允许你选择启动哪一个操作系统），这些文件首先被装载。这个目录也会包含LINUX核（压缩文件 vmlinuz），但LINUX核也可以存在别处，只要配置LILO并且LILO知道LINUX核在哪儿。 /dev：设备文件目录。LINUX下设备被当成文件，这样一来硬件被抽象化，便于读写、网络共享以及需要临时装载到文件系统中。正常情况下，设备会有一个独立的子目录。这些设备的内容会出现在独立的子目录下。LINUX没有所谓的驱动符。 /tmp：临时文件。引导启动后运行的程序应该使用/var/tmp ，而不是/tmp ，因为前者可能在一个拥有更多空间的磁盘上。该目录会被自动清理干净。 /mnt：系统管理员临时mount的安装点。程序并不自动支持安装到/mnt 。 /mnt 可以分为子目录(例如/mnt/dosa 可能是使用MSDOS文件系统的软驱，而/mnt/exta 可能是使用ext2文件系统的软驱)。 /opt：可选的应用程序，譬如，REDHAT 5.2下的KDE （REDHAT 6.0下，KDE放在其它的X-WINDOWS应用程序中，主执行程序在/usr/bin目录下 /lost+found：在文件系统修复时恢复的文件。 下面就以上部分目录的部分子目录功能加以说明： /usr文件系统 /usr 文件系统经常很大，因为所有程序安装在这里。 /usr 里的所有文件一般来自Linux distribution；本地安装的程序和其他东西在/usr/local 下。这样可能在升级新版系统或新distribution时无须重新安装全部程序。 /usr/X11R6：X Window系统的所有文件。为简化X的开发和安装，X的文件没有集成到系统中。 X自己在/usr/X11R6 下类似/usr 。 /usr/X386：类似/usr/X11R6 ，但是给X11 Release 5的。 /usr/bin：几乎所有用户命令。有些命令在/bin 或/usr/local/bin 中。 /usr/sbin：根文件系统不必要的系统管理命令，例如多数服务程序。 /usr/man、/usr/info、/usr/doc：手册页、GNU信息文档和各种其他文档文件。 /usr/include：C编程语言的头文件。为了一致性这实际上应该在/usr/lib 下，但传统上支持这个名字。 /usr/lib：程序或子系统的不变的数据文件，包括一些site-wide配置文件。名字lib来源于库(library); 编程的原始库存在/usr/lib 里。 /usr/local：本地安装的软件和其他文件放在这里。 /var文件系统 /var 包括系统一般运行时要改变的数据。每个系统是特定的，即不通过网络与其他计算机共享。 /var/catman：当要求格式化时的man页的cache。man页的源文件一般存在/usr/man/man* 中；有些man页可能有预格式化的版本，存在 /usr/man/cat* 中。而其他的man页在第一次看时需要格式化，格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。 (/var/catman 经常被清除，就象清除临目录一样。) /var/lib：系统正常运行时要改变的文件。 /var/local：/usr/local中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 /var/lock：锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以支持他们正在使用某个特定的设备或文件。其他程序注意到这个锁定文件，将不试图使用这个设备或文件。 /var/log：各种程序的Log文件，特别是login (/var/log/wtmp log所有到系统的登录和注销) 和syslog (/var/log/messages 里存储所有核心和系统程序信息。 /var/log 里的文件经常不确定地增长，应该定期清除。 /var/run：保存到下次引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登录的用户的信息。 /var/spool：mail, news, 打印队列和其他队列工作的目录。每个不同的spool在/var/spool 下有自己的子目录，例如，用户的邮箱在/var/spool/mail 中。 /var/tmp：比/tmp 允许的大或需要存在较长时间的临时文件。 (虽然系统管理员可能不允许/var/tmp 有很旧的文件。) /proc文件系统 /proc 文件系统是一个假的文件系统。它不存在在磁盘某个磁盘上。而是由核心在内存中产生。用于提供关于系统的信息(originally about processes, hence the name)。下面说明一些最重要的文件和目录。 /proc/1：关于进程1的信息目录。每个进程在/proc 下有一个名为其进程号的目录。 /proc/cpuinfo：处理器信息，如类型、制造商、型号和性能。 /proc/devices：当前运行的核心配置的设备驱动的列表。 /proc/dma：显示当前使用的DMA通道。 /proc/filesystems：核心配置的文件系统。 /proc/interrupts：显示使用的中断，and how many of each there have been. /proc/ioports：当前使用的I/O端口。 /proc/kcore：系统物理内存映象。与物理内存大小完全一样，但不实际占用这么多内存；it is generated on the fly as programs access it. (记住：除非你把它拷贝到什么地方，/proc 下没有任何东西占用任何磁盘空间。) /proc/kmsg：核心输出的消息。也被送到syslog 。 /proc/ksyms：核心符号表。 /proc/loadavg：系统"平均负载"；3个指示器指出系统当前的工作量。 /proc/meminfo：存储器使用信息，包括物理内存和swap。 /proc/modules：当前加载了哪些核心模块。 /proc/net：网络协议状态信息。 /proc/self：到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，是不同的连接。这主要便于程序得到它自己的进程目录。 /proc/stat：系统的不同状态，such as the number of page faults since the system was booted. /proc/uptime：系统启动的时间长度。 /proc/version：核心版本。 /etc目录 /etc 目录包含很多文件。许多网络配置文件也在/etc 中。 /etc/rc or /etc/rc.d or /etc/rc*.d：启动、或改变运行级时运行的scripts或scripts的目录。 /etc/passwd：用户数据库，其中的域给出了用户名、真实姓名、家目录、加密的口令和用户的其他信息。 /etc/fdprm：软盘参数表。说明不同的软盘格式。用setfdprm 设置。 /etc/fstab：启动时mount -a命令(在/etc/rc 或等效的启动文件中)自动mount的文件系统列表。 Linux下，也包括用swapon -a启用的swap区的信息。 /etc/group：类似/etc/passwd ，但说明的不是用户而是组。 /etc/inittab：init 的配置文件。 /etc/issue：getty 在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。内容由系统管理员确定。 /etc/magic：file 的配置文件。包含不同文件格式的说明，file 基于它猜测文件类型。 /etc/motd：Message Of The Day，成功登录后自动输出。内容由系统管理员确定。经常用于通告信息，如计划关机时间的警告。 /etc/mtab：当前安装的文件系统列表。由scripts初始化，并由mount 命令自动更新。需要一个当前安装的文件系统的列表时使用，例如df 命令。 /etc/shadow：在安装了影子口令软件的系统上的影子口令文件。影子口令文件将/etc/passwd 文件中的加密口令移动到/etc/shadow 中，而后者只对root可读。这使破译口令更困难。 /etc/login.defs：login 命令的配置文件。 /etc/printcap：类似/etc/termcap ，但针对打印机。语法不同。 /etc/profile , /etc/csh.login , /etc/csh.cshrc：登录或启动时Bourne或C shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 /etc/securetty：确认安全终端，即哪个终端允许root登录。一般只列出虚拟控制台，这样就不可能(至少很困难)通过modem或网络闯入系统并得到超级用户特权。 /etc/shells：列出可信任的shell。chsh 命令允许用户在本文件指定范围内改变登录shell。提供一台机器FTP服务的服务进程ftpd 检查用户shell是否列在 /etc/shells 文件中，如果不是将不允许该用户登录。 /etc/termcap：终端性能数据库。说明不同的终端用什么"转义序列"控制。写程序时不直接输出转义序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。这样，多数的程序可以在多数终端上运行。 /dev目录 /dev 目录包括所有设备的设备文件。设备文件用特定的约定命名
