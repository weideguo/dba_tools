//类似于mysql的binlog
//Replication是通过一个日志来存储写操作的，这个日志就叫做oplog。oplog是Capped Collection类型。
//operation log

oplog的操作
i  	insert
u  	update
d  	delete
c  	db cmd
db 	
n  	no op



--oplogSize     //启动时设置oplog的大小

--master        //明确设置为主节点才启用oplog

主节点oplog
use local;
db.oplog.$main.find()  


#查看指定时间段的操作
db.oplog.$main.find({ts:{$gt:Timestamp(1499877345, 1),$lt:Timestamp(1499877395, 1)}}) 

##导出特定时间的oplog
mongodump --host 127.0.0.1:27017 -d local -c 'oplog.$main' -q '{ts:{$gt:Timestamp(1499877345, 1),$lt:Timestamp(1499877395, 1)}}' -o path_op


#高版本的使用以下代替
'{"ts":{"$gte":{"$timestamp":{"t":1617778028,"i":1}},"$lte":{"$timestamp":{"t":1618220080,"i":1}}}}'
'{"ts":{"$gt": {"$timestamp":{"t":1617778028, "i":1}}}}'



主从模式已经废弃 不要再使用
单节点默认没有oplog，可以模拟成单个副本集节点，即只有一个主节点，没用从节点



在副本集时oplog
use local;
db.oplog.rs.find()


PITR

mongodump --oplog     #有oplog才能实现定点恢复
	--gzip #compress archive our collection output with Gzip
	--oplog does not dump the oplog collection
			主要目的是确保导出时不受更改的影响，用于实现定点恢复。
	
mongodump -d local -c oplog.rs -o backup_op
#将oplog备份得到的oplog.rs.bson替换【mongodump --oplog】备份目录backup_path中的oplog.bson，即可使用backup_path进行PITR
	
mongorestore --oplogReplay --oplogLimit=<seconds> backup_path  ##恢复到指定时间

	--gzip #decompress gzipped input



全备+dump出oplog.rs，使用oplogReplay可以定点恢复


rs.printReplicationInfo()     //查看oplog的时间窗口


oplog具有幂等性(idempotent)，多次操作结果也一样。




分片(sharding)PITR
在每个(replicate set)以及(config server replicate set)



