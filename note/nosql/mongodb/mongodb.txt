//服务端
mongod --dbpath=$path   				//启动，并指定数据库目录，不指定默认使用/data/db 
mongod --dbpath=/data/db --rest   		//启动，并启用web界面 http://localhost:28017
 
--port	 							// 指定端口
--fork   							// fork server process	  可以使用可执行文件执行多次
--auth   							// run with security
--maxConns							// 最大连接数，默认最大连接数为819
-f									// 指定使用的配置文件
--config config_filename    		// 使用配置文件 或者使用-f     配置文件为yaml格式（2.4之前的配置文件格式不一样）


字符编码
mongodb的字符编码都是utf8？


//管理shell
mongo

//连接 在管理shell中
mongodb://fred:foobar@localhost/baz   //使用用户名fred，密码foobar登录localhost的baz数据库。
mongodb://admin:123456@localhost/

//设置提示符
var host = db.serverStatus().host;  
var prompt = function() { return db+"@"+host+"> "; }  

prompt   //输出变量


//监控
db.collection_name.stats()      //表级别状态查看
db.stats()                      //库级别状态查看
db.serverStatus()

rs.status()



//概念
SQL				mongodb
database		database	数据库
table			collection	数据库表/集合
row				document	数据记录行/文档
column			field		数据字段/域
index			index		索引
table joins	 				表连接,MongoDB不支持
primary key		primary key	主键,MongoDB自动将_id字段设置为主键

view            view 		视图




//关闭服务端
db.shutdownServer()    			//在管理shell中
mongod  --shutdown  --dbpath 
kill mongod_pid


Tab		    //自动补全
ctrl+L      //清屏
cls			//清屏
show dbs    //显示数据库
db   	    //显示当前的数据库
quit()      //退出管理shell


//查询帮助
help   		
db.help()
db.abc.help()   




db.stats()  					//显示当前数据库状态
db.collection_name.stats()		//显示当前集合的状态
db.version()                    //版本





管理

db.serverStatus().connections		//查看连接数

db.serverStatus()                   //查看状态信息

	connections  //连接的信息

db.hello()                          // 4.4.2: (and 4.2.10, 4.0.21, and 3.6.21)，一些集群信息

db.currentOp()        				//查看当前连接信息,只列出有操作的
db.currentOp({"$all":true})			//查看所有连接信息
db.currentOp({"opid" : 1808430482}) //
db.killOp({op:opid})			    //杀死操作

// 查看当前正在创建索引的操作
db.adminCommand(
    {
      currentOp: true,
      $or: [
        { op: "command", "command.createIndexes": { $exists: true }  },
        { op: "none", "msg" : /^Index Build/ }
      ]
    }
)

db._adminCommand( {getCmdLineOpts: 1} )     //查看启动参数

db._adminCommand( {getCmdLineOpts: 1} )
db.adminCommand( {setParameter: 1, wiredTigerEngineRuntimeConfig: "cache_size=80G"} )        //动态修改参数
db.adminCommand( {setParameter: 1, wiredTigerEngineRuntimeConfig: "cache_size=80G"} )

db.adminCommand( { getParameter : "*" } )    //查看参数


日志
错误日志
日志翻转
--logRotate rename      		//在启动时设置，也可以设置reopen

use admin
db.runCommand({logRotate:1})    //在启动后设置

db.getSiblingDB("admin").runCommand({logRotate:1})


日志输出
--quiet             //--verbose

db.runCommand({setParameter:1,quiet:1})

db.currentOp()                 //查看当前负载
db.killOp("opid_value")		   //opid对应值



--storageEngine       //启动时指定存储引擎
存储引擎    
in-memory     //完全使用内存，没有持久化
WiredTiger    //3.2默认
mmapv1        //3.2之前默认 memory mapped storage engine


--wiredTigerCacheSizeGB    设置存储引擎cache的最大值，默认1/2 RAM


wiredTiger  同时使用存储引擎内存缓存以及文件系统的缓存



内存映射 使用操作系统的虚拟内存管理器管理自动映射
use admin;
db.runCommand(closeALLDatabases:1);    //释放mongodb数据库占用的内存

sysctl -w vm.drop_caches=1     //通过调整内核参数释放内存

db.serverStatus().mem

resident 物理内存占用
virtual  虚拟内存占用
mapped   映射到内存的数据大小






文件
memory-mapped files


mongod.lock		进程锁定文件
test.ns 		存储集合和索引的命令空间，即集合和索引的名称
test.0			集合和索引的数据文件
storage.bson	存储引擎的信息


锁
全局锁，可以查数据，不能写数据，可以复制数据目录备份
#加锁
db.fsyncLock()    
db.runcommand({'fsync':1,'lock':1})  

#解锁
db.fsyncUnlock()  

可以同时存在多个锁，解锁时逐个解锁，按加锁的顺序解锁
    
	
修复

db.runCommand({"repairDatabase":1})
    
bin/mongod  --repair   #启动是修复数据库
    



##慢查询分析
db.setProfilingLevel(1,500)

#0 不收集慢查询 
#1 只收集慢查询
#2 所有操作都收集
#500 慢查询时间下限，毫秒


db.getProfilingStatus()     #对当前库生效

db.system.profile.find()	#查看慢查询语句

db.system.profile.find().limit(10).sort({ts:1}).pretty()

#配置文件中设置
profile=1
slowms=500



db.setProfilingLevel(2)


外部执行
echo 'db.currentOp({$all:true})' | bin/mongo --quiet | more




#碎片优化 不会阻塞crud  但会阻塞索引的修改以及drop操作
db.runCommand({ compact: <collection name> })



