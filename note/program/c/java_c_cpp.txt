JNI

////////MyJni.java

package kg.tom;
 
public class MyJni {
   
     public native void display();
     public native double sum(double x,double y);
     
    public static void main(String[] args) {

    }
}


编译成class
javac kg.tom.MyJni.java
转成c的头文件，得到头文件kg_tom_MyJni.h
javah kg.tom.MyJni

///////java_sum_native.c

#include <jni.h>
#include "kg_tom_MyJni.h"
#include <stdio.h>
 
JNIEXPORT void JNICALL Java_kg_tom_MyJni_display(JNIEnv *env, jobject obj)
{
    printf("Hello World tom!!");
    return;
}
 
JNIEXPORT jdouble JNICALL Java_kg_tom_MyJni_sum(JNIEnv *env, jobject obj, jdouble a, jdouble b)
{
    return a + b;
}

编译成dll
gcc -Wall -D_JNI_IMPLEMENTATION_ -Wl,--kill-at -Id:/java/include –Id:/java/include/win32   -shared -o sum.dll java_sum_native.c

-Wall -D_JNI_IMPLEMENTATION_	把C文件编译成dll
-Wl,--kill-at  					因为mingw默认是用@来进行分隔,会导致JNI机制不能读取,所以要删掉？？？
Id:/java/include   				导入jni需要的头文件
-shared -o						输出配置


/////MyJniTest.java

package kg.tom;
 
public class MyJniTest {
	public native void display();
	public native double sum(double x,double y);
    static {
		System.loadLibrary("sum");
    }       
    public static void main(String[] args) {
		new MyJni().display();
		System.out.println(new MyJni().sum(2.0, 3.0));
    }
}


JNA 
(Java Native Access) JNA是建立在JNI技术基础之上的一个框架？


发布的C函数是：(编译成dll)
 
#define MYLIBAPI  extern   "C"     __declspec( dllexport ) 
 
MYLIBAPI void say(wchar_t* pValue);
 
 
这个函数的实现是：
 
void  say(wchar_t* pValue){
     std::wcout.imbue(std::locale("chs"));
 
     std::wcout<<L"上帝说："<<pValue<<std::endl;
}


java
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.WString;
 

public class TestDllService {
 
	public interface TestDll extends Library {
		/**
		* 当前路径是在项目下，而不是bin输出目录下。
		*/
		TestDll INSTANCE = (TestDll1)Native.loadLibrary("TestDll", TestDll.class);
		public void say(WString value);            
	}
	public static void main(String[] args) {
		TestDll.INSTANCE.say(new WString("Hello World!"));
		System.out.println("????");
	}
}

java和c的数据类型映射

boolean								int
byte								char
char								wchar_t
short								short
int									int
long								long long, __int64
float								float
double								double
Buffer Pointer						pointer
<T>[] 								pointer array
String								char*
WString								wchar_t*
String[]							char**
WString[]							wchar_t**
Structure							struct*/struct
Union								union
Structure[]							struct[]
Callback							<T> (*fp)()
NativeMapped						varies
NativeLong							long
PointerType							pointer








Jnative


