linux C++
g++编译时不用编译头文件
newcpp.h     ###头文件，包含类的声明，函数的声明
newcpp.cpp	 ###主函数文件，通过头文件使用类、函数
func.cpp     ###类函数的实现，包含头文件

g++ func.cpp -fPIC -shared -o libtest.so   ####编译成动态链接库
g++ newcpp.cpp -o newcpp  –L/root/src/lib –ltest_so    ###调用【/root/src/lib】下的【libtest_so.so】文件
###可能需要预先设置环变量【LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.】
LD_LIBRARY_PATH 设置共享库的路径

gcc用法与g++相同

g++ -shared -fPIC -I /usr/include/mysql -o test_add.so test_add.cpp



头文件使用位置
/usr/include    ##CentOS

-I /usr/include/mysql   ##指定头文件位置



windows
一：显示链接
调用的 DLL的主工程的 
main文件中代码如下：

#include <stdio.h>
#include <Windows.h>
#include <tchar.h>
 
int main()
{
      HMODULE hModule = NULL;
      typedef int (*Func)(int a, int b); 
      // 动态加载 DLL 文件
      hModule = LoadLibrary(_TEXT("..//Debug//FuncDll.dll" ));
      // 获取 add 函数地址
      Func fAdd = (Func)GetProcAddress(hModule, "add" );
      // 使用函数指针
      printf("%d/n" , fAdd(5, 2));
      // 最后记得要释放指针
      FreeLibrary(hModule);
      return 0;
}
 

二：隐式链接：

调用的 DLL的主工程的 
main文件中代码如下：

#include <stdio.h>
#include <Windows.h>
#include <tchar.h>
 
// 先把 lib 链接进来
#pragma comment (lib , "..//Debug//FuncDll.lib" )
// 外部声明的 add 函数
extern "C" _declspec (dllimport )
      int add(int a, char b); 
int main()
{
      // 直接调用 add 函数
      printf("%d/n" , add(5, 2));
      return 0;
}



linux
////////hello.c
#include<stdio.h>
void hello()
{
  printf("hello world/n");
}

////////test.c
#include<stdio.h>
int main()
{
  printf("call hello()");
  hello();
}

编译成so	
gcc -shared hello.c -o libhello.so
调用so，libhello.so放在与test.c同一目录
gcc test.c -lhello -L. -o test

1.可以把当前路径加入 /etc/ld.so.conf中然后运行ldconfig，或者以当前路径为参数运行ldconfig（要有root权限才行）。
2.把当前路径加入环境变量LD_LIBRARY_PATH中


静态链接
1. gcc -c hello.c 
2. 把目标文件归档    ar -r libhello.a hello.o
3. 在程序中链接静态库
       gcc test.c -lhello -L. -static -o hello.static 
或者   gcc test.c libhello.a -L. -o hello.static












