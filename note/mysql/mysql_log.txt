mysqlbinlog         ----查看二进制文件以供备份


二进制日志
--用于复制
--用于恢复
sync_binlog         ---设置二进制日志同步到磁盘的频率，默认二进制日志不是实时同步到磁盘
log_bin             ---my.cnf设置二进制文件路径并启用二进制日志【log_bin=path_name】，设置后即启用
binlog_format       ---my.cnf设置二进制日志的记录格式【基于语句记录(Statement-Based Logging,SBL)、基于行格式记录(Row-Bbased Logging,RBL)、混合模式记录(Mixed-Based Logging,MBL)】
expire_logs_days    ---保存时间（天）

binlog-ignore-db=db1[,db2]      ---指定库不使用binlog
binlog-do-db=db1[,db2]          ---指定库使用binlog

--从库设置不复制，需要在启动命令行中添加                      
replicate-ignore-db              
replicate-do-db1              
replicate-wild-do-table            --可以使用通配符
replicate-wild-ignore              --    




--强制写日志
flush logs;
flush binary logs;

--手动删除二进制日志
PURGE BINARY LOGS TO 'mysql-bin.010';
PURGE BINARY LOGS BEFORE '2008-04-02 22:46:26';

SHOW BINARY LOGS;   ---查看二进制日志
 
---修改二进制日志记录格式
SET GLOBAL binlog_format = 'STATEMENT';
SET GLOBAL binlog_format = 'ROW';
SET GLOBAL binlog_format = 'MIXED';

show variables like 'log_bin';                 ----查看是否启用二进制日志
show binlog events in 'mysql-bin.000025';      ---查看二进制日志的事件
show binlog events;
show binlog events in 'log_name' from pos_number limit 2
show binary logs;        ---查看二进制日志的信息

show relaylog events [in 'relay_log_name'] [from pos_number] [limit 2];  

mysqlbinlog  log_name    ----查看二进制日志的内容
    --start-datetime
    --stop-datetime
    --short-form

    --start-position
    --stop-position
    --base64-output=decode-rows        --导出row格式   只能用于查看，恢复的时候不要加这个参数
    -v                                 --导出成sql格式  与--base64-output一同使用
    
--从远端读取二进制日志并保存
mysqlbinlog -u root -p -P 3306 -h host_name -R -r save_as_text_file_name remote_binlog_name
    --stop-never   ----持续获取不中断
    --raw          --二进制存储，否则以sql存储
 
    --flashback    -- >=5.7 DML语句生成回滚语句
    
    
binlog通配符
binlog.1282{20..32}    
    
#允许混合使用start-position和stop-datetime 但binlog的顺序不能乱
mysqlbinlog --start-position=6147873 --stop-datetime="2020-09-02 05:20:00"  binlog.1282{19..32} > x.sql


在执行操作前【set sql_log_bin=0(或者off)】可禁止执行的语句生成二进制日志



binlog  mysql层的日志 从连接后，主主从推给从
文件开头前4字节（MagicNumber）
\xfe\x62\x69\x6e






####redo undo  存储引擎层的日志
---使用独立的undo表空间，必须在数据库创建前指定（默认undo log存放于系统表空间）
innodb_undo_directory     ---指定undo日志的目录
innodb_undo_tablespaces   ---指定undo表空间数量

innodb_log_group_home_dir ---指定redo日志文件的目录 默认为data目录
innodb_log_file_size      ---指定redo日志文件的大小    
innodb_log_file_in_group  ---指定redo日志文件组的数量 


innodb_flush_log_at_trx_commit={0|1|2}   ---默认为1
0 每秒刷新log buffer
1 每次事务提交时log buffer写入log file，并刷新到磁盘
2 每次事务提交后或者每秒刷新log buffer

sync_binlog=n  ---0~4294967295为数字
在n次提交后binlog刷新到磁盘
0 提交时binlog不同步到磁盘
1 每次提交写将binglog写到磁盘


sync_binlog=1 
innodb_flush_log_at_trx_commit=1
双1设置增强可用性


redo log 与 binlog 的一致性
  两阶段提交 2pc（执行commit命令时，未提交事务则写undo log）
  写 redo log 进入 prepare 状态
  写 binlog
  提交事务 进入 commit 状态
  
  


重新更改配置文件再启动可能出现错误
1.redo log文件大小不一致，移除现有redo log的文件（需要先安全关闭mysql）


WAL机制 (Write Ahead Log)
对数据文件进行修改前，必须将修改先记录日志。
Redo log就是一种WAL的应用。当数据库忽然掉电，再重新启动时，MySQL可以通过Redo log还原数据。也就是说，每次事务提交时，不用同步刷新磁盘数据文件，只需要同步刷新Redo log就足够了。相比写数据文件时的随机IO，写Redo log时的顺序IO能够提高事务提交速度。


--crash safe相关参数为双1            
sync_binlog=1                        #binlog的刷新
innodb_flush_log_at_trx_commit=1     #redo日志的刷新


--组提交  group commit


在没有开启binlog时

    Redo log的刷盘操作将会是最终影响MySQL TPS的瓶颈所在。为了缓解这一问题，MySQL使用了组提交，将多个刷盘操作合并成一个。

当开启binlog时
    为了保证Redo log和binlog的数据一致性，MySQL使用了二阶段提交，由binlog作为事务的协调者。而 引入二阶段提交 使得binlog又成为了性能瓶颈，先前的Redo log 组提交 也成了摆设。为了再次缓解这一问题，MySQL增加了binlog的组提交，目的同样是将binlog的多个刷盘操作合并成一个，结合Redo log本身已经实现的 组提交，分为三个阶段(Flush 阶段、Sync 阶段、Commit 阶段)完成binlog 组提交，最大化每次刷盘的收益，弱化磁盘瓶颈，提高性能。

--参数 >=5.7.5
binlog_group_commit_sync_delay=N             在等待N μs 后，开始事务刷盘
binlog_group_commit_sync_no_delay_count=N    如果队列中的事务数达到N个，就忽视binlog_group_commit_sync_delay的设置，直接开始刷盘




