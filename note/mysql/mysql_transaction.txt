
set autocommit={on|off}  ---设置是否自动提交事务

事务
start transaction;   ----开始事务 或 begin
...
commit;    ----提交事务   ---rollback回滚事务


SAVEPOINT identifier
ROLLBACK [WORK] TO [SAVEPOINT] identifier
RELEASE SAVEPOINT identifier


begin;
SQL1;
savepoint x;
SQL2;
rollback to x;
commit;         --SQL1会被提交


begin;
SQL1;
savepoint x;
SQL2;
savepoint x1;
SQL3
rollback to x;
commit;         --SQL1会被提交





global transaction 包含多个XA（Distributed Transaction）

在DTP（Distributed Transaction Processing）模型中
数据库服务属于资源管理器RM（Resource Manager ）
客户程序为Transaction Manager

两阶段提交 two-phase commit (2PC)
In the first phase, all branches are prepared.   其他事务还不能看到结果。
In the second phase, the TM tells the RMs whether to commit or roll back.  由第一阶段的结果确实提交或者回滚。

xid 不同的TM应该不同 

XA {START|BEGIN} xid [JOIN|RESUME]   --开启XA事务。如果使用的是XA START而不是XA BEGIN，那么不支持[JOIN|RESUME]，xid是一个唯一值，表示事务分支标识符
XA END xid [SUSPEND [FOR MIGRATE]]   --结束一个XA事务。不支持[SUSPEND [FOR MIGRATE]]？
XA PREPARE xid                       --准备提交 由所有的RM的prepare结果确定下一步是否提交或回滚。在此阶段之后不能再执行SQL。
XA COMMIT xid                        --提交。
XA ROLLBACK xid                      --回滚
XA RECOVER                           --列出所有处于PREPARE阶段的XA事务


XA COMMIT xid ONE PHASE              --提交。在IDLE状态之后直接提交，表示使用一阶段提交，两阶段提交协议中，如果只有一个RM参与，那么可以优化为一阶段提交



1.使用XA START来启动一个XA事务，并把它置于ACTIVE状态。
2.对于一个ACTIVE状态的 XA事务，可以执行构成事务的SQL语句，然后发布一个XA END语句。XA END把事务放入IDLE状态。
3.对于一个IDLE 状态XA事务，可以执行一个XA PREPARE语句或一个XA COMMIT … ONE PHASE语句：
  XA PREPARE把事务放入PREPARED状态。在此点上的XA RECOVER语句将在其输出中包括事务的xid值，因为XA RECOVER会列出处于PREPARED状态的所有XA事务。
  XA COMMIT … ONE PHASE用于预备和提交事务。xid值将不会被XA RECOVER列出，因为事务终止。
4.对于一个PREPARED状态的 XA事务，可以发布一个XA COMMIT语句来提交和终止事务，或者发布XA ROLLBACK来回滚并终止事务。



xa start '1111';
SQL1;
xa end '1111';
xa prepare '1111';  --所有RM都进入prepare阶段，如果存在失败，则下一操作都执行rollback；否则可以执行commit。
xa commit '1111';   --或 xa rollback '1111';



隔离级别

SET [GLOBAL | SESSION] TRANSACTION
    transaction_characteristic [, transaction_characteristic] ...

transaction_characteristic:
    ISOLATION LEVEL tx_level
  | READ WRITE
  | READ ONLY

tx_level:
     REPEATABLE READ
   | READ COMMITTED
   | READ UNCOMMITTED
   | SERIALIZABLE


select @@tx_isolation;    ---查询隔离级别
SET GLOBAL tx_isolation='READ-UNCOMMITTED';   -----设置隔离级别
READ-UNCOMMITTED     ---未提交读。幻想读、不可重复读和脏读都允许。
READ-COMMITTED		 ---已提交读。允许幻想读、不可重复读，不允许脏读
REPEATABLE-READ		 ---可重复读。允许幻想读，不允许不可重复读和脏读
SERIALIZABLE		 ---可串行化。幻想读、不可重复读和脏读都不允许。读加共享锁，写加排他锁，读写互斥，使用的悲观锁的理论


1.幻想读：
	事务T1读取一条指定where条件的语句，返回结果集。
	事务T2插入一行新记录，恰好满足T1的where条件。
	然后T1使用相同的条件再次查询，结果集中可以看到T2插入的记录，这条新纪录就是幻想读。
2.不可重复读取：
	事务T1读取一行记录，
	紧接着事务T2修改了T1刚刚读取的记录，
	然后T1再次查询，发现与第一次读取的记录不同，这称为不可重复读。
3.脏读：
	事务T1更新了一行记录，还未提交所做的修改，
	这个T2读取了更新后的数据，
	然后T1执行回滚操作，取消刚才的修改，
	所以T2所读取的行就无效，也就是脏数据。


MVCC(Multi-Version Concurrency Control) 多版本并发控制
read没有阻塞write, 使用MVCC的技术解决了write/read相互阻塞的问题

而对开启MVCC机制的锁，叫做乐观锁，大多基于数据版本(Version)记录机制实现

MVCC的一种简单实现是基于CAS(Compare-and-swap)思想的有条件更新(Conditional Update)

