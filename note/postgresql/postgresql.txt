 编译安装
 cd $postgresql_home
 ./configure --prefix=/03/postgresql
 make
 make install

cd ./contrib   ##编译扩展插件 可选
make
make install


默认端口5432 
pg是多进程模式
pg一个连接建立一个进程
 
 
bin/initdb -D ./data/     				        #初始化数据库
bin/pg_ctl -D ./data/ -l logfile start    #启动实例
bin/postgres -D ./data    				        #实际服务运行的文件

关闭
bin/pg_ctl -D ./data stop
 
bin/pg_ctl -D ./data stop -o SIGTERM  

SIGTERM   
不再允许新的连接，但是允许所有活跃的会话正常完成他们的工作，只有在所有会话都结束任务后才关闭。这是智能关闭。  
  
SIGINT   
不再允许新的连接，向所有活跃服务器发送 SIGTERM(让它们立刻退出)，然后等待所有子进程退出并关闭数据库。这是快速关闭。  
  
SIGQUIT   
令 postgres 向所有子进程发送 SIGQUIT 并且立即退出(所有子进程也会立即退出)，而不会妥善地关闭数据库系统。这是立即关闭。这样做会导致下次启动时的恢复(通过重放 WAL 日志)。推荐只在紧急的时候使用这个方法。  
  
SIGKILL   
此选项尽量不要使用，这样会阻止服务器清理共享内存和信号灯资源，那样的话你只能在启动服务器之前自己手工做这件事。另外，SIGKILL 直接把 postgres 杀掉，而不会等它把信号中继给它的子进程，因此我们还需要手工杀掉每个独立子进程。 
 



bin/psql postgres            #使用初始化创建的数据库postgres

bin/psql postgres user_name  #默认创建的用户名与启动pg服务的系统用户名一致

psql [OPTION]... [DBNAME [USERNAME]]
  -h, --host=HOSTNAME     
  -p, --port=PORT         
  -U, --username=USERNAME 
  -w, --no-password       
  -W, --password          


psql中的命令
\?			###\开始的命令查看
\h			###sql语句查看
\! clear 	###执行系统的命令
\q			###退出命令行 
\db			###列出所有的tablespace	
\l			###列出所有database
\c db_name  ###切换数据库
\dt			###查看数据库下的表
\d tb_name	###查看表的字段 #表结构
\dv			###查看视图
\du			###查看用户    安装时默认以当前用户名创建一个用户，没有密码

\set AUTOCOMMIT off    #关闭自动提交 只对当前会话有效
\set AUTOCOMMIT on

schema            #表的全形   schema_name.table_name
tablespace
domains

一个database下有多个schema
不能同时访问不同database下的对象



创建表默认在public schema下，public下的表可以不指定schema

特殊schema 系统自动创建
    pg_catalog
    information_schema
    
系统表 在 pg_catalog 下 ，可以不指定schema进行查询
pg_user
pg_roles
pg_tablespace
pg_database
pg_tables    



select * from pg_catalog.pg_tables;
select * from pg_tables;                       #查看表信息 如 schema tablespace
SELECT tablename FROM pg_tables WHERE tablename NOT LIKE 'pg%' AND tablename NOT LIKE 'sql_%' ORDER BY tablename;   ###查询数据库的非系统表


select * from information_schema.tables;   ##查看所有的表


#普通查询需要指定schema
select * from schema_name.table_name;



###用户权限
#角色
CREATE ROLE role_name;
DROP ROLE role_name;

select * from information_schema.table_privileges;  ##查看用户对表的权限

create user test_user with password 'test_password' login in role "TestRole1"     #同时需要修改与重载配置文件pg_hba.conf以允许用户访问
ALTER USER postgres WITH PASSWORD 'postgres';

GRANT ALL PRIVILEGES ON DATABASE exampledb TO test_user; 
alter user test_user superuser createrole createdb replication;

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA schema_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]
          
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    TO role_specification [, ...] [ WITH GRANT OPTION ]



##进行存储设置？
create tablespace "TestDbs2" location '/u03/postgresql/data/TestDbs2';   		###表空间的文件在数据目录下

##进行命令空间限制？
create schema schema01;					###创建schema  各个对象比如表,函数等存放在各个schema下,同一个schema下不能有重复的对象名字,但在不同schema下可以重复.

##进行资源限制？
create database demodb		###创建数据库 一个连接只能来连接一个数据库
template template0
encoding 'UTF8'
tablespace ts_demo01
connection limit 200;

alter database demodb set tablespace ts_demo01;    #更改数据库的表空间

create table table_name(...) tablespace ts_demo;   ##创建表
 
select pg_relation_filepath('tab100');             ###查看表的位置 

show all;                          ##查看所有参数
show XXX;      ##查看参数
set XXX=yyyy;  ##设置参数           ##changes run-time configuration parameters，只对当前session有效
set local XXX=yyyy;                ##指对当前事务有效

alter system set set XXX=yyyy;     ##等同于更正配置文件再reload
ALTER SYSTEM RESET XXX;

show search_path;			               ###查看创建表时使用的schema
set search_path=schema_name	       ###设置创建表时使用的schema
ALTER database "my_database" SET search_path TO my_schema;   ##更改默认使用的schema


##字符编码
\encoding GBK
show client_encoding;
show server_encoding;
 
 
select * from pg_stat_activity ;           #查看进程
select pg_terminate_backend(procpid);      #杀死进程


#配置文件#########################################################################################################################
$postgresql/data
postgresql.conf   参数配置文件
pg_hba.conf 		  认证文件，用户登录限制   host-based authentication
pg_ident.conf     配置操作系统用户映射为数据库用户 

####map示例
###################################################pg_hba.conf
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             192.168.0.0/16          ident map=omicron

###################################################pg_ident.conf
# MAPNAME       SYSTEM-USERNAME         PG-USERNAME
# bryanh can also connect as guest1
omicron         bryanh                  guest1

#########################pg_hba.conf中METHOD的类型
    trust
    
    reject
    
    scram-sha-256
    
    md5
    
    password
    
    gss
    
    sspi
    
    ident
    
    peer
    
    ldap
    
    radius
    
    cert
    
    pam
    
    bsd
       

内存设置
shared_buffers
temp_buffers  数据库会话访问临时表数据
work_mem      内部的sort和hash操作
maintenance_work_mem   VACUUM，CREATE INDEX，REINDEX等操作




#配置文件重新加载（二选一）
pg_ctl reload
SELECT pg_reload_conf();
 
 
#####################################################################################################################################  
 
VACUUM
VACUUM — garbage-collect and optionally analyze a database

#autovacuum       automate the execution of VACUUM and ANALYZE commands    高版本才有
#postgresql.conf
track_counts = on
autovacuum = on



pg_dump dbname > dumpfile  #备份成sql文件
psql dbname < dumpfile     #恢复

pg_dumpall > dumpfile
psql -f dumpfile postgres

pg_dump -Fc dbname > filename
pg_restore -d dbname filename


归档WAL write ahead log
wal_level         replica or higher, 
archive_mode      on off aways
archive_command   shell command

archive_command = 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'  # Unix
archive_command = 'copy "%p" "C:\\server\\archivedir\\%f"'  # Windows

%p is replaced by the path name of the file to archive
%f is replaced by only the file name

PITR
#物理备份(二选一)
pg_basebackup -D /data/pg_backup_test -l 2018_09_13_backup
pg_basebackup -D backup/data -T /opt/ts=$(pwd)/backup/ts    #如果使用表空间使用其他目录，需要指定映射关系

SELECT pg_start_backup('label_name', false, false);   #The third parameter being false  initiate a non-exclusive base backup.
直接复制data目录进行备份
SELECT * FROM pg_stop_backup(false, true);


复制的时候可选不复制以下
pg_wal
pg_replslot
postmaster.pid
postmaster.opts
以下目录下的文件也可以不复制，但目录需要存在
pg_dynshmem 
pg_notify 
pg_serial 
pg_snapshots 
pg_stat_tmp  
pg_subtrans
pgsql_tmp开头的目录可以不复制

#恢复
复制物理备份的文件到对应目录
清空pg_wal，将最新示例的pg_wal下的文件放入，以便恢复到示例down的最后时刻
修改文件recovery.conf（在data目录下）
     restore_command = 'cp /mnt/server/archivedir/%f %p'   #设置从备份的归档wal进行恢复
     recovery_target_timeline = "string"                      #设置恢复到的时间点
     recovery_target_time = timestamp                         #latest 0 1423234
启动实例


#########主从###################################################################################################
#Log-Shipping Standby Servers

archive, pg_wal, streaming replication      #三步恢复方式

从archive目录复制到pg_wal目录，根据pg_wal目录的日志文件恢复，然后根据streaming replication追加


##需要复制主的归档目录到从的归档目录，如果从实例需要从归档日志开始恢复

主实例账号设置
##pg_hba.conf
##  host    all             foo             192.168.0.0/16          md5


从实例

#####recovery.conf
standby_mode = 'on'
primary_conninfo = 'host=192.168.1.50 port=5432 user=foo password=foopass'     
restore_command = 'cp /path/to/archive/%f %p'                                  ##恢复用
archive_cleanup_command = 'pg_archivecleanup /path/to/archive %r'              ##清理日志，pg_archivecleanup主要用于standby


#############Replication Slots
#replication slots provide an automated way to ensure that the master does not remove WAL segments until they have been received by all standbys, and that the master does not remove rows which could cause a recovery conflict even when the standby is disconnected.

SELECT * FROM pg_create_physical_replication_slot('node_a_slot');
SELECT slot_name, slot_type, active FROM pg_replication_slots;

#####recovery.conf
standby_mode = 'on'
primary_conninfo = 'application_name=s1 host=192.168.1.50 port=5432 user=foo password=foopass'
primary_slot_name = 'node_a_slot'


##streaming replication 默认异步复制


#同步复制
#在主实例中设置postgresql.conf
###哪些从实例需要同步复制
synchronous_standby_names = 'FIRST 2 (s1, s2, s3)'   #列表中前两个从要同步复制  对应primary_conninfo中的application_name
synchronous_standby_names = 'ANY 2 (s1, s2, s3)'     #任意两个从要同步复制
synchronous_standby_names = '*'                      #所有从都需要同步复制

synchronous_commit = on                              #同步复制模式 off, local, remote_write, remote_apply, on                                  

##########################################################################################################################


select pg_current_wal_lsn();                              主 当前日志点
select pg_walfile_name_offset(pg_current_wal_lsn());      查看当前日志点对应的文件以及偏移量
select pg_last_wal_receive_lsn();                         从 最近接受的日志点
select pg_is_in_recovery();                               是否进行恢复 实例复制也算一种恢复
select pg_last_wal_replay_lsn();                          已经回放的日志点
select pg_last_xact_replay_timestamp();                   从实例上一个回放事务的时间戳（为在主实例完成的时间戳）


select pg_start_backup('label_goes_here');                #开始备份
SELECT * FROM pg_walfile_name_offset(pg_stop_backup());   #结束备份并显示备份的wal点 以便直接使用之后的wal进行恢复

select pg_switch_wal();                                   #手动切换日志


select * from  pg_stat_replication    ##查看复制的信息 同步方式
【pg_current_wal_lsn】 【sent_lsn】         indicate that the master server is under heavy load
【sent_lsn】 【pg_last_wal_receive_lsn】    indicate network delay, or that the standby is under heavy load


防止脑裂
STONITH
Shoot The Other Node In The Head    
    

#fail over 二选一
pg_ctl promote                                               ##提升当前实例为主

#recovery.conf
trigger_file="/path_to_trigger/my_trigger_file"              ##只要创建对应这个文件，即可提升当前实例为主  standby_mode = 'on'


##############################################################################################################################

pg_waldump    #将wal文件导出成可读形式文件 
pg_resetwal   #清空wal日志，需要关闭postgresql进程

bin/pg_rewind --target-pgdata=./data --source-server="host=192.168.1.128 port=5432 user=pg_user password=pg_user_password dbname=postgres"   ##切换为新主的从 如果失败，手动从新主备份然后再设主从

bin/pg_controldata -D ./data  ##查看实例状态 


pg_test_fsync      ##测试wal的sync性能
pg_test_timing     ##测试服务器的性能开销

pg_receivewal -D /data/pg_test/pg_wal_test -h 192.168.1.128 -p 5432 -U pg_user -W    #直接接受wal文件并保存于本地 当前接收的文件以.partial结尾

bin/pg_recvlogical -d postgres -h 192.168.59.130 -p 5432 -U wdg -W --file=/data/pg_test/pg_wal_logic/wal.txt -S logical_slot_test --start   ##接收wal的可读格式 需要预先创建logical slot  



select * from pg_replication_slots;                      ##查看slot
SELECT * FROM pg_drop_replication_slot('node_a_slot');   ##删除slot

SELECT * FROM pg_create_logical_replication_slot('logical_slot_test', 'test_decoding');            #创建logical_replication_slot  需要wal_level为logical  需要编译扩展插件
SELECT * FROM pg_logical_slot_get_changes('logical_slot_test', NULL, NULL);                        #由logical_replication_slot查看操作


##
select * from pg_extension ;          #查看插件
create extension postgres_fdw;        #创建插件
drop extension postgres_fdw cascade;  #删除插件


MVCC机制

innodb的基于回滚段实现。undo日志自动清理。
PG新老数据一起存放的基于XID实现。新老数据一起存放，需要定时触 发VACUUM。
