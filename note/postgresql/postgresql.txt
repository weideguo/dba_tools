
默认端口5432 
pg是多进程模式
pg一个连接建立一个进程
 

bin/pg_ctl -D ./data/ start                     #启动实例 配置文件在data目录下
bin/postgres -D ./data                          #实际服务运行的文件

关闭
bin/pg_ctl -D ./data stop
 
bin/pg_ctl -D ./data stop -o SIGTERM  

SIGTERM   
不再允许新的连接，但是允许所有活跃的会话正常完成他们的工作，只有在所有会话都结束任务后才关闭。这是智能关闭。  
  
SIGINT   
不再允许新的连接，向所有活跃服务器发送 SIGTERM(让它们立刻退出)，然后等待所有子进程退出并关闭数据库。这是快速关闭。  
  
SIGQUIT   
令 postgres 向所有子进程发送 SIGQUIT 并且立即退出(所有子进程也会立即退出)，而不会妥善地关闭数据库系统。这是立即关闭。这样做会导致下次启动时的恢复(通过重放 WAL 日志)。推荐只在紧急的时候使用这个方法。  
  
SIGKILL   
此选项尽量不要使用，这样会阻止服务器清理共享内存和信号灯资源，那样的话你只能在启动服务器之前自己手工做这件事。另外，SIGKILL 直接把 postgres 杀掉，而不会等它把信号中继给它的子进程，因此我们还需要手工杀掉每个独立子进程。 
 



bin/psql postgres            #使用初始化创建的数据库postgres

bin/psql postgres user_name  #默认创建的用户名与启动pg服务的系统用户名一致

psql [OPTION]... [DBNAME [USERNAME]]
  -h, --host=HOSTNAME     
  -p, --port=PORT         
  -U, --username=USERNAME 
  -w, --no-password       
  -W, --password          


psql中的命令
\?            ###\开始的命令查看
\h            ###sql语句查看
\! clear      ###执行系统的命令
\q            ###退出命令行 
\db           ###列出所有的tablespace    
\l            ###列出所有database   select * from pg_database;
\c db_name    ###切换数据库
\dt           ###查看数据库下的表
\d tb_name    ###查看表的字段 #表结构
\dv           ###查看视图
\du           ###查看用户    安装时默认以当前用户名创建一个用户，没有密码
\x            ###按照左边为标题格式输出

\set AUTOCOMMIT off    #关闭自动提交 只对当前会话有效
\set AUTOCOMMIT on

schema                 #表的全形   schema_name.table_name
tablespace
domains

一个database下有多个schema
不能同时访问不同database下的对象

创建表默认在public schema下，public下的表可以不指定schema
#普通查询需要指定schema
select * from schema_name.table_name;

特殊schema 系统自动创建
    pg_catalog
    information_schema
    

系统表 在 pg_catalog 下 ，可以不指定schema进行查询
pg_user          #用户
pg_roles         #角色
pg_group         #组

pg_tablespace
pg_database
pg_tables    


select * from pg_catalog.pg_tables;
select * from pg_tables;                                      # 查看表信息 如 schema tablespace
SELECT tablename FROM pg_tables 
WHERE tablename NOT LIKE 'pg%' 
AND tablename NOT LIKE 'sql_%' ORDER BY tablename;            # 查询数据库的非系统表
select * from information_schema.tables;                      # 查看所有的表


select * from pg_database;                                    # 查看库信息
select datname,pg_database_size(datname) from pg_database;    # 查看数据库的大小
select pg_relation_size('table_name')                ;        # 表的大小
select pg_total_relation_size('table_name')          ;        # 表的大小 包括索引
select pg_size_pretty(pg_relation_size('table_name'));        # 更友好的查看表的大小

select pg_relation_filepath('tab100');                        # 查看表的位置 



###用户权限
#角色
CREATE ROLE role_name;
DROP ROLE role_name;

select * from information_schema.table_privileges;                                #查看用户对表的权限

create user test_user with password 'test_password' login in role "TestRole1"     #可能同时需要修改与重载配置文件pg_hba.conf以允许用户访问
ALTER USER postgres WITH PASSWORD 'postgres';

GRANT ALL PRIVILEGES ON DATABASE exampledb TO test_user; 
alter user test_user superuser createrole createdb replication;

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA schema_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]
          
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    TO role_specification [, ...] [ WITH GRANT OPTION ]

-- 查看用户的密码记录信息
SELECT * FROM pg_authid ;


ALTER DATABASE db_name OWNER TO test_user;
ALTER DATABASE table_name OWNER TO test_user;



##进行存储设置？
create tablespace "TestDbs2" location '/u03/postgresql/data/TestDbs2';           ###表空间的文件在数据目录下

##进行命令空间限制？
create schema schema01;                   ### 创建schema  各个对象比如表，函数等存放在各个schema下，同一个schema下不能有重复的对象名字，但在不同schema下可以重复

##进行资源限制？
create database demodb                    ### 创建数据库 一个连接只能来连接一个数据库
template template0                        ### 使用的模板
encoding 'UTF8'
tablespace ts_demo01
connection limit 200;


pg的模板
template1   #默认使用，由template0生成，可以修改
template0   #干净的模板



alter database demodb set tablespace ts_demo01;    #更改数据库的表空间

create table table_name(...) tablespace ts_demo;   #创建表
 
show search_path;                                            ###查看创建表时使用的schema
set search_path=schema_name                                  ###设置创建表时使用的schema
ALTER database "my_database" SET search_path TO my_schema;   ##更改默认使用的schema



show all;                          ##查看所有参数
show XXX;      ##查看参数
set XXX=yyyy;  ##设置参数          ##changes run-time configuration parameters，只对当前session有效
set local XXX=yyyy;                ##指对当前事务有效

alter system set set XXX=yyyy;     ##等同于更正配置文件再reload
ALTER SYSTEM RESET XXX;


##字符编码
\encoding GBK
show client_encoding;
show server_encoding;
 
 
select * from pg_stat_activity ;           #查看进程 连接数
select pg_terminate_backend(procpid);      #杀死进程

select usename,count(*) from pg_stat_activity group by 1; 

show max_connections;                      #最大连接数


--查看表的字段信息
select 
a.attname as fieldname, 
col_description(a.attrelid,a.attnum) as comment,
format_type(a.atttypid,a.atttypmod) as type, 
a.attnotnull as notnull
from pg_class as c,
pg_attribute as a
where c.relname = 'bill'                         --- 要查的表名
and a.attrelid = c.oid and a.attnum > 0;



 
bin/pg_controldata -D ./data  ##查看实例状态 



pg_test_fsync      ##测试wal的sync性能
pg_test_timing     ##测试服务器的性能开销






##
select * from pg_extension ;          #查看插件
create extension postgres_fdw;        #创建插件
drop extension postgres_fdw cascade;  #删除插件




## pg_stat_statements 插件安装

shared_preload_libraries='pg_stat_statements'

select sum(calls) s from pg_stat_statements;  --通过间隔一段时间调用以计算qps



--修改配置文件 postgresql.auto.conf，这个文件不要手动修改
--如果允许在线修改，则直接生效；不支持在线修改，重启后生效
--即使启动时也加载配置文件 postgresql.auto.conf
alter system set shared_preload_libraries='pg_stat_statements';     



时区
-- 当前时间
select now();  
-- 查看时区
show time zone;
-- 可选的时区
select * from pg_timezone_names;
-- 设置时区
set time zone "Asia/Shanghai";

# postgresql.conf 中设置时区 
# 动态修改需要运行 pg_ctl reload
log_timezone = 'PRC'
timezone = 'PRC'
