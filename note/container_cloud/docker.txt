容器(container)
镜像(image)
容器使用镜像启动生成，镜像可以由容器保存创建

容器可以使用ssh连接(不建议)



启动docker服务
dockerd                 #1直接启动 
service docker start	#2使用service docker start启动



/etc/sysconfig/docker    	                                ###配置文件
/var/lib/docker				                                ###数据路径
/var/lib/docker/devicemapper/mnt/$no_idea_dir/rootfs/   	###容器的文件对应在主机中的位置，在此目录下的文件容器可以直接使用

/etc/docker/daemon.json                                     ##配置文件路径




#####################################################################################################################################################
LXC  linux container
libvirt-lxc


systemd   CoreOS的init进程


namespace
资源隔离        (flags)
	UTS			CLONE_NEWUTS  主机名与域名	                  unix time-sharing system
	IPC         CLONE_NEWIPC  信号量、消息队列、共享内存      Inter-Process Communication
	PID         CLONE_NEWPID  进程编号
	Network     CLONE_NEWNET  网络
	Mount       CLONE_NEWNS   挂载点
	User        CLONE_NEWUSER 用户、组

	
	通过调用系统函数clone等创建子进程
		
cgroups
资源限制

	表现为一个文件系统,挂载后可以看到自系统 
		mkdir -p /cgroups/memory
		mount -t cgroup -o memory memory /cgroups/memory
	
	在/sys/fs/cgroup/XXX(XXX: cpu | ...)下，创建目录，目录下自动生成文件，在文件中写入信息(进程号、cpu使用率)达到限制进程使用资源的目的
	
yum install libcgroups  #安装cgroups	
service cgconfig start  #启动cgroups

/etc/cgconfig.conf #配置文件 启动服务时依赖这个挂载cgroups文件，也可以在启动后在cgroups层级中手动添加目录并挂载
	
	
	
docker创建命名为docker的控制组/sys/fs/cgroup/cpu/docker/$container_id
	tasks     		进程、线程ID
	cgroup.proc		TGID（线程组ID，即线程组第一个进程的PID）
	



int clone(int (*child_func)(void *).void *child_stack,int flags,void *arg)   ##创建一个独立namespace的进程
fork()       #创建子进程

init进程托管孤儿进程，pid=1
####################################################################################################################################################


docker API      可以对docker进行管理


容器执行驱动      execdriver
volume存储驱动    volumedriver
镜像存储驱动	  graphdriver


#busybox
静态编译不依赖第三方库，可以在空镜像中安装从而实现常规linux命令的使用
在docker容器中
cd /usr/bin
ln -s  busybox vi          #创建链接实现命令
		


alpine  ##简单的基础镜像
scrach  ##空镜像 可以跟busybox使用      
 
######################################################################################################################################################


	
	
Dockerfile命令
	ENV	<key> <value>	                   #环境变量声明
	FROM <image>                           #使用基础镜像
	COPY <src> <dest>                      #复制<src>的目录、文件添加到镜像中的dest
	ADD <src> <dest>                       #与COPY类似
	RUN <command>                          #创建容器，执行命令，命令结束后提交容器为新镜像，新镜像被下一条指令使用
	CMD	<command>	                       #执行命令
	ENTRYPOINT  <command>                  #与CMD类似          
	ONBUILD	<INSTRUCTION>                  #该镜像被作为FROM引用时执行docker指令
	EXPOSE  <port> 		                   #端口暴露
	EXPOSE  <container_port>:<host_port>   #端口映射 


docker build github.com/creack/docker-firefox     	                ##创建镜像，使用url
docker build -t image_name:TAG_name - < Dockerfile   	            ##创建镜像，从STDIN导入Dockerfile，ADD只能使用URL	
docker build -t image_name:TAG_name .   				            ##创建镜像，使用当前目录下的Dockerfile,Dockerfile指定的主机路径为相对路径
docker build - < Dockfile                                           #使用Dockerfile创建镜像                  
docker build - -f <dockerfile name>                                 
docker build - -f Dockerfile 		



数据卷volume 将宿主机的文件、文件夹挂载到容器

docker run
	-v vol_name:/container_dir		#指定名字创建volume		创建目录在/var/lib/docker/volumes
	-v /container_dir				#随机生成名字、ID 		
	-v /hostdir:/container_dir      #以主机指定目录挂载到容器指定目录

	
也可以使用Dockerfile创建volume
VOLUME /data					    #挂载到容器的/data   不能指定主机的目录
VOLUME ["/data1","/data2"]		    #挂载两个目录

docker volume inspect vol_name		                                #以名字查看volume的信息
docker inspect --format "{{.Volumes}}" container_id                 #查看volume
docker inspect -f '{{.Id}}' $container_name   						###查看容器的id
docker inspect <container id>                                       #查看docker的信息，网络、volume等




###container_name/container_id可以通用
docker images    		                                            ###显示已经存在的镜像
docker pull image_tag                                               ###添加镜像 image_tag如centos:6  hub.docker.com/explore中查看
docker pull private-registry.com/user-name/ubuntu:latest            
docker push 192.168.0.100:5000/ubuntu                               # 推送镜像库到私有源，也可以推送到官方
docker tag apline:3.4 localhost:5000/my-alpine
docker push localhost:5000/my-alpine                                #上传镜像到仓库要先tag


                         
docker start $container_name  										##启动一个容器
docker kill <container-id>                                          #停止一个运行中的容器
docker create --name wdg_container ubuntu      						###使用镜像创建容器，--name指定容器名，可以自动生成 
docker commit $container_id $image_name                             ###容器提交成镜像



docker cp $contrain_id_or_name:$docker_file $host_file      		####拷贝容器中文件到主机
docker cp $host_file $contrain_id_or_name:$docker_file    			####拷贝主机中文件到容器
docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-                  ##移动文件 主机与容器 ##Copy files/folders between a container and the local filesystem
docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH                  
docker cp local_file <CONTAINER id>:/container_path                 ##复制本地文件到容器内



docker export $container_id >> /home/export.tar                     ###容器转成文件
cat /home/export.tar | docker import - $image_name:$version  	    ###容器导出的文件转成镜像
tar cv --files-from /dev/null | docker import - scratch             #scrach是专有名字 为空镜像 可以用作其他的基础镜像                                                                        

docker save $image_name >> /home/save.tar     	                    ###镜像转成文件
docker load < /home/save.tar    								    ###镜像导出的文件转成镜像


                                                               
docker attach <container-id>                                        #进入容器 需要使用 ctrl+p ctrl+q 退出，否则容器会关闭                                                                  
docker attach [OPTIONS] CONTAINER                                   #Attach to a running container 进入运行中的容器
                                                                                                                                                                                                                                                                                                                                      
docker exec -it <container-id> /bin/bash                            #进入容器 退出不会导致容器关闭                                                                   
docker exec [OPTIONS] CONTAINER COMMAND [ARG...]                    

                                                                                                                                        
docker search ip1:port1/centos                                      #从指定仓库搜索镜像，默认从公共镜像搜索
                                                                    
                                                                                                                                                      
docker rmi <image id> | <image name>                                ##删除镜像
docker rm <container id>                                            ##删除容器
docker ps -a                                                        ##查看容器 包括停止的
docker ps                                                           ##查看生成的容器
docker info		                                                    ###                                     
docker stop    	                                                    ##停止
docker restart                                                      ##重启
docker pause                                                        ##暂停
docker unpause                                                      ##取消暂停
docker logs                                                         ##输出指定容器的日志


docker run -i ubuntu /bin/bash   									                            ###创建容器，运行，进入交互模式
docker run -v $host_dir:$docker_dir $container_name   				                            ###-v挂载主机文件夹到容器
docker run -p $host_ip:$host_Port:$container_port $container_name                               ####容器与主机端口映射
docker run -it --name my_docker_name --link docker_name:alias_name image_name /bin/bash         #启动镜像image_name命名为my_docekr_name,连接到命名为docker_name的容器,并设置别名为alias_name。使用alias_name可以当做host_name使用从而进行连接

docker run -it centos7 /bin/sh                                                                  #使用镜像创建新容器并进入shell，quit退出时会结束容器   【 ctl+p ctl+q】退出时不结束容器

	-i   #交互模式
	-t   #分配一个伪终端(pseudo-TTY)
	-d   #后台进行方式运行            #紧跟的命令不能发生退出 否则容器会停止   
	-p 8080:80   			#容器的80映射到主机8080
	-p 127.0.0.1:8080:80	        #端口绑定到127.0.0.1:8080
	--expose 80 81			##开放一组端口
	--user user_name  		##使用镜像中指定用户启动容器
	
	-v <conteiner path>		##挂载容器指定目录，可以使用 docker inpect <container id> 查看挂载目录对应主机的路径
	-v <host path>:<container pth>   ##将主机的目录挂载到容器的目录
	--env XXX=YYY                    ##可以有多个--env
        --restart                     
            no             #不自动启动容器
	    always         #一直尝试启动直到成功
	    on-failure:10  #尝试10次都失败后不再启动
#容器内服务自自动  
通过linux的服务自启动方式实现，即写入/etc/rc.local或者相关文件？    
通过Dockerfiler中设置启动命令    
    
##########################################################################################################################################################
##私有仓库
##register
#docker 容器内服务自启动 

##启动TLS

docker run -d \
  --restart=always \
  --name registry \
  -v /local_path/certs:/certs \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:80 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -p 80:80 \
  registry:2


使用账号密码
htpasswd 创建密码文件并上传到/auth/htpasswd
-e "REGISTRY_AUTH=htpasswd" \
-e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \

  
不启用TLS
docker run -d -p 5000:5000 --restart always --name registry registry:2  
  
  
  
#使用私有仓库
#编辑 /etc/docker/daemon.json
#多个私有仓库，逗号分隔即可
{
    "insecure-registries": [
        "registry:5000"
    ]
}




##设置默认使用的仓库
{
    "registry-mirrors":["https://xxxx.xxxx.com"]
}


#默认仓库设置
/etc/containers/registries.conf

/etc/sysconfig/docker




##容器私有仓库启动
##不设置TLS时只能在本地使用
docker run -d -p 5000:5000 --restart=always --name registry registry-1.docker.io/distribution/registry

curl http://127.0.0.1:5000/v2/_catalog            #仓库查看

########################################
第三方仓库
#登陆
docker login --username=user_name 3th_parth_registry_server
#下载
docker pull ...
#上传
docker tag ...
docker push ...


####################################################################################################################################################
##网络

docker网络模式
host模式
Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。

例如，我们在10.10.101.105/24的机器上用host模式启动一个含有web应用的Docker容器，监听tcp80端口。当我们在容器中执行任何类似ifconfig命令查看网络环境时，看到的都是宿主机上的信息。而外界访问容器中的应用，则直接使用10.10.101.105:80即可，不用任何NAT转换，就如直接跑在宿主机中一样。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。

container模式
这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。

none模式
这个模式和前两个不同。在这种模式下，Docker容器拥有自己的Network Namespace，但是并不为Docker容器进行任何网络配置。这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。

bridge模式
bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。



网络驱动
bridge
host
overlay
remote
null


ip addr show         #在容器中查看网络

docker network ls    ##查看驱动



CNM
container network model


沙盒（sandbox）
端点（endpoint）容器的网络点，类似于网卡？
网络（network） 一个网络可以包含多个端点



##bridge演示

##会在容器中创建网卡eth0并自动配置ip
##在宿主机中创建网卡veth
##通过在宿主机创建的网桥docker0通信 
##docker daemon启动后自动创建网桥docker0，默认172.17.0.1/16，docker容器都会在其中选择一个未使用的ip

dockerd --fixed-cidr=172.18.0.1/24                                               ##启动daemon时指定使用的网段，与docker0网桥处于同一网段
                                                                                                                                                                 
docker network ls                                                                #查看网络
docker inspect <network-id>				                                         #查看指定网络详细信息


docker network create --driver <driver-name> <network-name>                      #创建创建一个网络 创建网络时会生成一个虚拟网卡  
docker network create net_name1       							                 #默认驱动选择bridge  
docker network create net_name2       							                 #默认驱动选择bridge  
                                                                             
docekr run -it --name contrain1 --network net_name1 /bin/bash                    ##不指定network，则默认为bridge
docekr run -it --name contrain2 --network net_name2 /bin/bash                    
docekr run -it --name contrain3 --network net_name2 /bin/bash                    
                                                                                 
docker network connect net_name2 container1		                          #新增网络并配置ip以连接这个网络

处在同一网络时可以直接使用其他容器的名称连接 如 ping contrain2


#DNS实现，新
docker network create isolated_nw                                                 #创建网络
docker run --net=isolated_nw -it --name=container1 --link container2:c2 /bin/bash #创建容器container1，并连接到container2  可以使用别名连接
docker run --net=isolated_nw -it --name=container2 /bin/bash                      #创建容器container2


##使用link通信
#环境变量注入(/etc/hosts),传统（不再推荐使用）
docker run -d --name db training/postgres
docker run -d -P --name web --link db:webdb webapp python app.py         #--link <name or id>:alias  连接时使用别名即可连接 不用指定ip




route -n	##查看静态路由
brctl show  ##查看网桥


linux network namespace

ip netns add nstest;    		                #创建network namespace
ip netns list;		                            #增加
ip netns delete nstest;			                #删除
                                                
ip netns exec nstest ip addr                    #显示nstest namespace中的网卡信息；格式 ip netns exec <network namespace name> <command>
ip netns exec nstest bash                       #启动一个shell


ip netns exec nstest ip link set dev lop up	    #启动环回设备lo
ip link add veth-a type veth peer name veth-b   #添加虚拟网卡veth-a veth-b
ip link set veth-b netns nstest                 #将veth-b网卡添加到nstest


ip netns exec nstest ip link    	            #查看nstest命令空间的网卡
                                                
ip addr add 10.0.0.1/24  dev veth-a             #veth-a网卡没有分配，是主机的网卡
ip link set dev veth-a up	                    #启动网卡veth-a
                                                
ip addr add 10.0.0.2/24  dev veth-b             #veth-b网卡是nstest命名空间下的网卡
ip link set dev veth-b up	                    #启动网卡veth-b
                                                
ip route                                        #生成路由，在主机中
ip netns exec netns ip route 		            #生成路由，在nstest中
                                                
ping 10.0.0.2				                    #ping,在主机中
ip netns exec nstest ping 10.0.0.1              #ping,在nstest中




ip netns list命令的信息由下获取
/var/run/netns

进程的network namespace，不同的net:[XXXXX] 代表不同network namespace
/proc/$PID/ns

ln -s /proc/$PID/ns/net /var/run/netns/nstest     将进程的network namespace文件链接到/var/run/netns下，即可使用ip netns进行操作





原本主机网络
#网络 10.1.1.0/24
#eth0 10.1.1.1/24 
#网关 10.1.1.254/24

启动容器

	docker run -itd --name test1 --net=none ubuntu /bin/bash

创建网桥
	brctl addbr br0
	ip link set br0 up
	#将主机eth0桥接到br0上，并把eth0的ip配置在br0
	ip addr add  10.1.1.1/24 dev br0;\
			ip addr del 10.1.1.1/24 dev eth0;\
			btctl addif br0 eth0;\
			ip route del default;\
			ip route add default via 10.1.1.254/24 dev br0
	
	pid=$(docker inspect --format '{{.State.Pid}}' test1)   
	mkdir -p /var/run/netns
	ln -s /proc/$pid/ns/net /var/run/netns/$pid
	ip link add veth-a type veth peer name veth-b
	brctl addif br0 veth-a up                                #veth-a连接到网桥
	ip link set veth-b $pid                                  #veth-b加入network namespace
	ip netns exec $pid ip link set dev veth-b eth0
	ip netns exec $pid ip link set eth0 up	
	ip netns exec $pid ip addr add 10.1.1.2/24/24 dev eth0   #容器的ip
	ip netns exec $pid ip route add default via 10.1.1254

    
    
    
pipework(直接使用pipework工具配置网络)

跨主机通信(主机在同一网络)
1.桥接
使用两块网卡，一块用于主机通信，一块用于桥接所有容器。所有的容器处于一个二层网络。

2.直接路由
同一主机的容器在一个二层网络，不同主机的容器通过主机的网卡转发。只需要一块网卡。





#跨网络通信
GRE generic routing encapsulation
用于实现VPN？

##########################################################################################################################################################




  
  
  
  
#第三方工具登录容器
nsenter --target $PID --mount --uts --ipc --net --pid  




##############容器云#############################


flannel  实现docker容器跨主机通信




kubernates



