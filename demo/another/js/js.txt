JS

数据类型
字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）
//强制类型转换
Number()      
String() 
Boolean()

parseInt()   //存在不可解析字符时结束 只解析之前的字符串 

typeof()   //类型查看 number string boolean object function


变量
var x=var_value;   //变量指定时不需指定类型 指定值动态设置类型
let x=var_value;   //作用域只在当前块

const定义的变量不可以修改，而且必须初始化。
var定义的变量可以修改，如果不初始化会输出undefined，不会报错。
let是块级作用域，函数内部使用let定义后，对函数外部无影响。

数组
var mycars=new Array();
mycars[0]="Saab";
mycars[1]="Volvo";
var mycars2=new Array("Saab","Volvo","BMW");


函数
function function_name(x,y){
return x*y;
}
function_name(10,20)    //调用

var function_name = function(a,b){
 return a + b;
}
function_name(10,20)   ///调用

回调函数 callback
A callback is a function that is passed as an argument to another function and 
is executed after its parent function has completed.

var f=function(x,y,z){
    return (x+y+z);
};

var ff = function(callback)
{
    var a = 1,
        b = 2,
        c = 3;
    var t = callback(a,b,c);   ///callback不是关键字，可以任取
    return t + 10;
};

console.log(ff());

// 剩余参数
var f =function(...args) {
    // args 即为数组
    return args.reduce((pre,current) => {
        return pre + current;
    });
}

// () => {}  //创建匿名函数
var f=(x) => x+1
var f=function(x){return x+1}


...[]             // 将数组转成","分隔的队列
[1, ...[2,3,4]]   // 实现队列合并

// yield //可以实现多次返回 
function* f(){
    yield '111'
    yield '222'
    return '333'
}


let f1=f()
f1.next()     // 逐个获取yield的值

for(let i of f()){}   // for...of语句迭代  


//匿名函数直接调用
!function(){console.log('xxxx');}()        // true
+function(){console.log('xxxx');}()        // NaN
-function(){console.log('xxxx');}()        // NaN
~function(){console.log('xxxx');}()        // -1


eval(string)   //以js命令执行字符串
eval("x=10;y=20;console.log(x*y)")


alert(string);        //浏览器中弹出对话框
console.clear();      //chrome控制台中清屏

var id = setTimeout("function",time)   // 只执行一次 时间单位为毫秒
var id = setInterval("function",time)  // 重复执行

clearTimeout(id);               //取消定时 为window对象可以加上前缀 window.clearTimeout(id)
clearInterval()

js 的执行顺序为异步模式 即如果执行多个函数，执行的顺序不是逐一顺序运行。如果需要实现这个目的，可以通过回调函数实现，或者使用jQuery中的控制方案


headers
Connection: keep-alive       #请求网页一次之后tcp连接没有关闭 连接依旧保持
